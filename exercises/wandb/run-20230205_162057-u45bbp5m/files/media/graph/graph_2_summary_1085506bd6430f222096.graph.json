{"format": "torch", "nodes": [{"name": "in_layers", "id": 2373264684080, "class_name": "Sequential(\n  (0): Conv2d(in_channels=3, out_channels=64, kernel_size=7, stride=2, padding=3)\n  (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n  (2): ReLU()\n  (3): MaxPool2d(kernel_size=3, stride=2, padding=1)\n)", "parameters": [["0.weight", [64, 3, 7, 7]], ["1.weight", [64]], ["1.bias", [64]]], "output_shape": [[512, 64, 8, 8]], "num_parameters": [9408, 64, 64]}, {"name": "residual_layers", "id": 2373264681296, "class_name": "Sequential(\n  (0): BlockGroup(\n    (blocks): Sequential(\n      (0): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (1): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (2): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=64, out_channels=64, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=64, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n    )\n  )\n  (1): BlockGroup(\n    (blocks): Sequential(\n      (0): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        )\n        (right): Sequential(\n          (0): Conv2d(in_channels=64, out_channels=128, kernel_size=1, stride=2, padding=0)\n          (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        )\n        (relu): ReLU()\n      )\n      (1): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (2): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (3): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=128, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n    )\n  )\n  (2): BlockGroup(\n    (blocks): Sequential(\n      (0): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Sequential(\n          (0): Conv2d(in_channels=128, out_channels=256, kernel_size=1, stride=2, padding=0)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (relu): ReLU()\n      )\n      (1): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (2): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (3): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (4): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (5): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=256, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n    )\n  )\n  (3): BlockGroup(\n    (blocks): Sequential(\n      (0): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=2, padding=1)\n          (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        )\n        (right): Sequential(\n          (0): Conv2d(in_channels=256, out_channels=512, kernel_size=1, stride=2, padding=0)\n          (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        )\n        (relu): ReLU()\n      )\n      (1): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n      (2): ResidualBlock(\n        (left): Sequential(\n          (0): Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1)\n          (1): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n          (2): ReLU()\n          (3): Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1)\n          (4): BatchNorm2d(num_features=512, eps=1e-05, momentum=0.1)\n        )\n        (right): Identity()\n        (relu): ReLU()\n      )\n    )\n  )\n)", "parameters": [["0.blocks.0.left.0.weight", [64, 64, 3, 3]], ["0.blocks.0.left.1.weight", [64]], ["0.blocks.0.left.1.bias", [64]], ["0.blocks.0.left.3.weight", [64, 64, 3, 3]], ["0.blocks.0.left.4.weight", [64]], ["0.blocks.0.left.4.bias", [64]], ["0.blocks.1.left.0.weight", [64, 64, 3, 3]], ["0.blocks.1.left.1.weight", [64]], ["0.blocks.1.left.1.bias", [64]], ["0.blocks.1.left.3.weight", [64, 64, 3, 3]], ["0.blocks.1.left.4.weight", [64]], ["0.blocks.1.left.4.bias", [64]], ["0.blocks.2.left.0.weight", [64, 64, 3, 3]], ["0.blocks.2.left.1.weight", [64]], ["0.blocks.2.left.1.bias", [64]], ["0.blocks.2.left.3.weight", [64, 64, 3, 3]], ["0.blocks.2.left.4.weight", [64]], ["0.blocks.2.left.4.bias", [64]], ["1.blocks.0.left.0.weight", [128, 64, 3, 3]], ["1.blocks.0.left.1.weight", [128]], ["1.blocks.0.left.1.bias", [128]], ["1.blocks.0.left.3.weight", [128, 128, 3, 3]], ["1.blocks.0.left.4.weight", [128]], ["1.blocks.0.left.4.bias", [128]], ["1.blocks.0.right.0.weight", [128, 64, 1, 1]], ["1.blocks.0.right.1.weight", [128]], ["1.blocks.0.right.1.bias", [128]], ["1.blocks.1.left.0.weight", [128, 128, 3, 3]], ["1.blocks.1.left.1.weight", [128]], ["1.blocks.1.left.1.bias", [128]], ["1.blocks.1.left.3.weight", [128, 128, 3, 3]], ["1.blocks.1.left.4.weight", [128]], ["1.blocks.1.left.4.bias", [128]], ["1.blocks.2.left.0.weight", [128, 128, 3, 3]], ["1.blocks.2.left.1.weight", [128]], ["1.blocks.2.left.1.bias", [128]], ["1.blocks.2.left.3.weight", [128, 128, 3, 3]], ["1.blocks.2.left.4.weight", [128]], ["1.blocks.2.left.4.bias", [128]], ["1.blocks.3.left.0.weight", [128, 128, 3, 3]], ["1.blocks.3.left.1.weight", [128]], ["1.blocks.3.left.1.bias", [128]], ["1.blocks.3.left.3.weight", [128, 128, 3, 3]], ["1.blocks.3.left.4.weight", [128]], ["1.blocks.3.left.4.bias", [128]], ["2.blocks.0.left.0.weight", [256, 128, 3, 3]], ["2.blocks.0.left.1.weight", [256]], ["2.blocks.0.left.1.bias", [256]], ["2.blocks.0.left.3.weight", [256, 256, 3, 3]], ["2.blocks.0.left.4.weight", [256]], ["2.blocks.0.left.4.bias", [256]], ["2.blocks.0.right.0.weight", [256, 128, 1, 1]], ["2.blocks.0.right.1.weight", [256]], ["2.blocks.0.right.1.bias", [256]], ["2.blocks.1.left.0.weight", [256, 256, 3, 3]], ["2.blocks.1.left.1.weight", [256]], ["2.blocks.1.left.1.bias", [256]], ["2.blocks.1.left.3.weight", [256, 256, 3, 3]], ["2.blocks.1.left.4.weight", [256]], ["2.blocks.1.left.4.bias", [256]], ["2.blocks.2.left.0.weight", [256, 256, 3, 3]], ["2.blocks.2.left.1.weight", [256]], ["2.blocks.2.left.1.bias", [256]], ["2.blocks.2.left.3.weight", [256, 256, 3, 3]], ["2.blocks.2.left.4.weight", [256]], ["2.blocks.2.left.4.bias", [256]], ["2.blocks.3.left.0.weight", [256, 256, 3, 3]], ["2.blocks.3.left.1.weight", [256]], ["2.blocks.3.left.1.bias", [256]], ["2.blocks.3.left.3.weight", [256, 256, 3, 3]], ["2.blocks.3.left.4.weight", [256]], ["2.blocks.3.left.4.bias", [256]], ["2.blocks.4.left.0.weight", [256, 256, 3, 3]], ["2.blocks.4.left.1.weight", [256]], ["2.blocks.4.left.1.bias", [256]], ["2.blocks.4.left.3.weight", [256, 256, 3, 3]], ["2.blocks.4.left.4.weight", [256]], ["2.blocks.4.left.4.bias", [256]], ["2.blocks.5.left.0.weight", [256, 256, 3, 3]], ["2.blocks.5.left.1.weight", [256]], ["2.blocks.5.left.1.bias", [256]], ["2.blocks.5.left.3.weight", [256, 256, 3, 3]], ["2.blocks.5.left.4.weight", [256]], ["2.blocks.5.left.4.bias", [256]], ["3.blocks.0.left.0.weight", [512, 256, 3, 3]], ["3.blocks.0.left.1.weight", [512]], ["3.blocks.0.left.1.bias", [512]], ["3.blocks.0.left.3.weight", [512, 512, 3, 3]], ["3.blocks.0.left.4.weight", [512]], ["3.blocks.0.left.4.bias", [512]], ["3.blocks.0.right.0.weight", [512, 256, 1, 1]], ["3.blocks.0.right.1.weight", [512]], ["3.blocks.0.right.1.bias", [512]], ["3.blocks.1.left.0.weight", [512, 512, 3, 3]], ["3.blocks.1.left.1.weight", [512]], ["3.blocks.1.left.1.bias", [512]], ["3.blocks.1.left.3.weight", [512, 512, 3, 3]], ["3.blocks.1.left.4.weight", [512]], ["3.blocks.1.left.4.bias", [512]], ["3.blocks.2.left.0.weight", [512, 512, 3, 3]], ["3.blocks.2.left.1.weight", [512]], ["3.blocks.2.left.1.bias", [512]], ["3.blocks.2.left.3.weight", [512, 512, 3, 3]], ["3.blocks.2.left.4.weight", [512]], ["3.blocks.2.left.4.bias", [512]]], "output_shape": [[512, 512, 1, 1]], "num_parameters": [36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 73728, 128, 128, 147456, 128, 128, 8192, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 294912, 256, 256, 589824, 256, 256, 32768, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 589824, 256, 256, 1179648, 512, 512, 2359296, 512, 512, 131072, 512, 512, 2359296, 512, 512, 2359296, 512, 512, 2359296, 512, 512, 2359296, 512, 512]}, {"name": "out_layers", "id": 2373265228464, "class_name": "Sequential(\n  (0): AveragePool()\n  (1): Flatten(start_dim=1, end_dim=-1)\n  (2): Linear(in_features=512, out_features=1000, bias=True)\n)", "parameters": [["2.weight", [1000, 512]], ["2.bias", [1000]]], "output_shape": [[512, 1000]], "num_parameters": [512000, 1000]}], "edges": []}